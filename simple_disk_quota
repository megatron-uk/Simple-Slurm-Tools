#!/bin/bash

DEST_DIR=""
LFS_QUOTA="n"
USER_MODE="y"
GROUP_MODE="n"
VERBOSE="n"
TOTAL_USERS=0
TOTAL_GROUPS=0
USER_NAMES=""
GROUP_NAMES=""
LOG=`mktemp`

banner() {
	# Tool banner
	echo "simple_disk_quota"
	echo "================="
	
	echo ""
	echo "Part of Simple-Slurm-Tools"
	echo "https://github.com/megatron-uk/Simple-Slurm-Tools"
}

help() {
	# Show help text
	echo ""
	echo "Useage:"
	echo ""
	echo "$0 DIRECTORY_NAME"
	echo ""
	echo "-u User quotas [default: $USER_MODE]"
	echo "-g Group quotas [default: $GROUP_MODE]"
	echo "-l Use LFS quota tool"
	echo "-v Verbose output"
	echo "-U Pass a list of usernames instead of using 'find' to enumerate users"
	echo "-G Pass a list of groups instead of using 'find' to enumerate groups"
	echo ""
	echo "$0 will produce a quota listing for all users or groups found under"
	echo "a given directory."
	echo ""
	echo "You may pass a list of names to skip the use of 'find' enumerating"
	echo "all files under the destination directory. e.g."
	echo "-U bob,alice,sue -G users,sudo,dev"
}

showOptions() {
	# Print options
	if [ "$VERBOSE" == "y" ]
	then
		banner
		echo ""
		echo "DESTINATION = $DEST_DIR"
		echo "USER mode = $USER_MODE"
		echo "USER list = $USER_NAMES"
		echo "GROUP mode = $GROUP_MODE"
		echo "GROUP list = $GROUP_NAMES"
		echo "LFS mode = $LFS_QUOTA"
		echo "VERBOSE = $VERBOSE"
	fi
}

testDest() {
	# Test destination exists
	if [ -d "$DEST_DIR" ]
	then
		if [ "$VERBOSE" == "y" ]
		then
			echo "DESTINATION Found [$DEST_DIR]"
		fi
	else
		echo ""
		echo "Error, DESTINATION not found [$DEST_DIR]"
		exitScript
		exit 1
	fi
}

exitScript() {
	# Exit, cleaning up log file(s)
	rm -f "$LOG"
	rm -f "$LOG"\.*
}

getUsersForDest() {
	# Get a list of users who have files under DEST_DIR	
	if [ "$USER_MODE" == "y" ]
	then
		if [ "$VERBOSE" == "y" ]
		then
			echo ""
			echo "Please wait, extracting user list..."
		fi
		
		if [ "$USER_NAMES" != "" ]
		then
			echo $USER_NAMES | sed 's/,/\n/g' | sort | uniq | while read u
			do
				echo "$u" >> "$LOG.userlist"
			done
		else
			if [ "$LFS_QUOTA" == "y" ]
			then
				lfs find "$DEST_DIR" -xdev -type f -printf "%u\n" 2>/dev/null > "$LOG.userlist.tmp"
			else
				find "$DEST_DIR" -xdev -type f -printf "%u\n" 2>/dev/null > "$LOG.userlist.tmp"
			fi
			cat "$LOG.userlist.tmp" | sort | uniq > "$LOG.userlist"
			rm -f "$LOG.userlist.tmp"
		fi
		TOTAL_USERS=`wc -l "$LOG.userlist" | awk '{print $1}'`
		
		if [ "$VERBOSE" == "y" ]
		then
			echo "- Done [$TOTAL_USERS users]"
		fi
	fi
}

getQuotaForAllUsers() {
	if [ "$USER_MODE" == "y" ]
	then
		if [ "$VERBOSE" == "y" ]
		then
			echo ""
			echo "Please wait, retrieving quotas for users..."
		fi
		cat "$LOG.userlist" | while read u
		do
			getQuotaForUser $u
		done
		
	fi
}

getQuotaForUser() {
	# Get a quota for an individual user
	user=$1
	if [ "$USER_MODE" == "y" ]
	then	
		if [ "$LFS_QUOTA" == "y" ]
		then
			lfs quota -u $user $DEST_DIR 2>/dev/null | grep $DEST_DIR | awk '{print $2}' | sed 's/\*//g' > "$LOG.userlist.quota.$user"
		else
			quota -u $user 2>/dev/null | grep $DEST_DIR | awk '{print $2}' | sed 's/\*//g' > "$LOG.userlist.quota.$user"
		fi
		USER_BYTES=`cat $LOG.userlist.quota.$user`
		echo "user_quota,$DEST_DIR,$user,$USER_BYTES"
	fi
}

getGroupsForDest() {
	# Get a list of groups who have files under DEST_DIR
	if [ "$GROUP_MODE" == "y" ]
	then
		if [ "$VERBOSE" == "y" ]
		then
			echo ""
			echo "Please wait, extracting group list..."
		fi
		
		if [ "$GROUP_NAMES" != "" ]
		then
			echo $GROUP_NAMES | sed 's/,/\n/g' | sort | uniq | while read g
			do
				echo "$g" >> "$LOG.grouplist"
			done
		else
			if [ "$LFS_QUOTA" == "y" ]
			then
				lfs find "$DEST_DIR" -xdev -type f -printf "%g\n" 2>/dev/null > "$LOG.grouplist.tmp"
			else
				find "$DEST_DIR" -xdev -type f -printf "%g\n" 2>/dev/null > "$LOG.grouplist.tmp"
			fi
			cat "$LOG.grouplist.tmp" | sort | uniq > "$LOG.grouplist"
			rm -f "$LOG.grouplist.tmp"
		fi
		TOTAL_GROUPS=`wc -l "$LOG.grouplist" | awk '{print $1}'`
		
		if [ "$VERBOSE" == "y" ]
		then
			echo "- Done [$TOTAL_GROUPS groups]"
		fi
	fi
}

getQuotaForAllGroups() {
	#
	if [ "$GROUP_MODE" == "y" ]
	then
		if [ "$VERBOSE" == "y" ]
		then
			echo ""
			echo "Please wait, retrieving quotas for groups..."
		fi
		cat "$LOG.grouplist" | while read g
		do
			getQuotaForGroup $g
		done
	fi
}

getQuotaForGroup() {
	#
	group=$1
	if [ "$GROUP_MODE" == "y" ]
	then
		if [ "$LFS_QUOTA" == "y" ]
		then
			lfs quota -g $group $DEST_DIR 2>/dev/null | grep $DEST_DIR | awk '{print $2}' | sed 's/\*//g' > "$LOG.grouplist.quota.$group"
		else
			quota -g $group 2>/dev/null | grep $DEST_DIR | awk '{print $2}' | sed 's/\*//g' > "$LOG.grouplist.quota.$group"
		fi
		GROUP_BYTES=`cat $LOG.grouplist.quota.$group`
		echo "group_quota,$DEST_DIR,$group,$GROUP_BYTES"
	fi
}

########################################

while getopts ":hugd:vlU:G:" option; do
	case $option in
		h) # display Help
			banner
			help
			exitScript
			exit 1;;
		u) # User quota
			USER_MODE="y";;
		U) # User list
			USER_NAMES=$OPTARG;;
		g) # Group quota
			GROUP_MODE="y";;
		G) # Group list
			GROUP_NAMES=$OPTARG;;
		d) # Destination directory
			DEST_DIR=$OPTARG;;
		l) # Enable LFS
			LFS_QUOTA="y";;
		v) # Verbose
			VERBOSE="y";;
		\?) # Unknown option
			banner
			echo "\nError, Invalid option"
			help
			exitScript
			exit 1;;
	esac
done

if [ "$DEST_DIR" = "" ]
then
	banner
	echo ""
	echo "Error, you must set the target directory"
	help
	exitScript
	exit 1
fi

showOptions
testDest
getUsersForDest
getGroupsForDest
getQuotaForAllUsers
getQuotaForAllGroups
exitScript
exit 0
