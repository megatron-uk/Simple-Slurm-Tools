#!/usr/bin/env python3

"""
Simple Slurm Tools
Copyright (C) 2024 John Snowdon

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import argparse
from lib.slurmjob import SlurmJob

####################################################################
#
# Show a summary of all running slurm jobs (within a queue) and the
# overall system utilisation (of jobs within that queue).
#
####################################################################

AUTHOR		= "John Snowdon"
URL			= "https://github.com/megatron-uk/Simple-Slurm-Tools"

jobtypes		= ['R', 'P']
QUEUES		= []
OUT_MODE		= "stats"
global_jobs 	= []
global_pending_jobs 	= []

def print_csv(stats = None):
	""" Prints the stats as a csv string. """


def print_stats(stats = None):
	""" Prints the stats strings to screen. """

	print("")
	stext = "-= Running =-                            -= Pending =-\n"
	stext += "=============                            =============\n"
	stext += ("Total users              : %8s      Total users waiting              : %8s\n" %
		(stats['R']['users'], stats['P']['users']))

	stext += ("Total running jobs       : %8s      Total waiting jobs               : %8s\n" %
		(stats['R']['jobs'], stats['P']['jobs']))

	stext += ("Total allocated cores    : %8s      Total requested cores            : %8s\n" %
		(stats['R']['cores']['sum'], stats['P']['cores']['sum']))

	stext += ("Total allocated memory   : %8s GB   Total requested memory           : %8s GB\n" %
		(int(stats['R']['ramjob']['max'] / 1024), int(stats['P']['ramjob']['max'] / 1024)))

	stext += ("Total runtime            : %8s min  Total waiting time               : %8s min\n" %
		(int(stats['R']['time']['max']), int(stats['P']['time']['max'])))

	stext += ("-\n")
	stext += ("Largest job (cores)      : %8s      Largest waiting job (cores)      : %8s\n" %
		(stats['R']['cores']['max'], stats['P']['cores']['max']))

	stext += ("Largest job (memory/job) : %8s GB   Largest waiting job (memory/job) : %8s GB\n" %
		(int(stats['R']['ramjob']['max'] / 1024), int(stats['P']['ramjob']['max'] / 1024)))

	stext += ("Largest job (memory/core): %8s GB   Largest waiting job (memory/core): %8s GB\n" %
		(int(stats['R']['ramcore']['max'] / 1024), int(stats['P']['ramcore']['max'] / 1024)))

	stext += ("Longest job runtime      : %8s min  Longest waiting time             : %8s min\n" %
		(int(stats['R']['time']['max']), int(stats['P']['time']['max'])))

	stext += ("-\n")
	stext += ("Average job (cores)      : %8s      Average waiting job (cores)      : %8s\n" %
		(int(stats['R']['cores']['mean']), int(stats['P']['cores']['mean'])))

	stext += ("Average job (memory/job) : %8s GB   Average waiting job (memory/job) : %8s GB\n" %
		(int(stats['R']['ramjob']['mean'] / 1024), int(stats['P']['ramjob']['mean'] / 1024)))

	stext += ("Average job (memory/core): %8s GB   Average waiting job (memory/core): %8s GB\n" %
		(int(stats['R']['ramcore']['mean'] / 1024), int(stats['P']['ramcore']['mean'] / 1024)))

	stext += ("Average runtime          : %8s min  Average waiting time             : %8s min\n" %
		(int(stats['R']['time']['mean']), int(stats['P']['time']['mean'])))

	print(stext)

def queue_summary(qjobs = None, qpending_jobs = None, out_mode = OUT_MODE):
	""" Print the summary for a given queue of jobs """

	jobs = {
		'R' : [],
		'P' : [],
	}

	if qjobs:
		jobs['R'] = qjobs

	if qpending_jobs:
		jobs['P'] = qpending_jobs

	stats = {}
	for jobtype in jobtypes:
		stats[jobtype] = {}
		stats[jobtype]['jobs'] = len(jobs[jobtype])
		stats[jobtype]['users'] = 0
		stats[jobtype]['ram'] = 0
		stats[jobtype]['cores'] = { 'sum' : 0, 'max' : 0, 'mean' : 0 }
		stats[jobtype]['time'] = { 'sum' : 0, 'max' : 0, 'mean' : 0 }
		stats[jobtype]['ramcore'] = { 'sum' : 0, 'max' : 0, 'mean' : 0 }
		stats[jobtype]['ramjob'] = { 'sum' : 0, 'max' : 0, 'mean' : 0 }

	for jobtype in jobtypes:
		job_users = []
		for j in jobs[jobtype]:

			# THe time field differs if it is a running or pending job
			if jobtype == 'R':
				timefield = 'ElapsedTime'

			if jobtype == 'P':
				timefield = 'SubmitMinutes'

			# Count a new unique user
			if j['User'] not in job_users:
				job_users.append(j['User'])

			# Update totals for cores, ram and runtime
			stats[jobtype]['cores']['sum'] = stats[jobtype]['cores']['sum'] + j['AllocCPUS']
			stats[jobtype]['ram'] = stats[jobtype]['ram'] + j['TotalMemory']
			stats[jobtype]['ramjob']['sum'] = stats[jobtype]['ramjob']['sum'] + j['TotalMemory']
			stats[jobtype]['time']['sum'] = stats[jobtype]['time']['sum'] + j[timefield]
			stats[jobtype]['ramcore']['sum'] = stats[jobtype]['ramcore']['sum'] + j['MemoryPerCore']

			# Update max runtime
			if j[timefield] > stats[jobtype]['time']['max']:
				stats[jobtype]['time']['max'] = j[timefield]

			# Update max core count
			if j['AllocCPUS'] > stats[jobtype]['cores']['max']:
				stats[jobtype]['cores']['max'] = j['AllocCPUS']

			# Update max ram/job count
			if j['TotalMemory'] > stats[jobtype]['ramjob']['max']:
				stats[jobtype]['ramjob']['max'] = j['TotalMemory']

			# Update max ram/core count
			if j['MemoryPerCore'] > stats[jobtype]['ramcore']['max']:
				stats[jobtype]['ramcore']['max'] = j['MemoryPerCore']

		stats[jobtype]['users'] = len(job_users)

	for jobtype in jobtypes:
		if stats[jobtype]['jobs'] > 0:
			stats[jobtype]['time']['mean'] = stats[jobtype]['time']['sum'] / stats[jobtype]['jobs']
			stats[jobtype]['cores']['mean'] = stats[jobtype]['cores']['sum'] / stats[jobtype]['jobs']
			stats[jobtype]['ramjob']['mean'] = stats[jobtype]['ramjob']['sum'] / stats[jobtype]['jobs']
			stats[jobtype]['ramcore']['mean'] = stats[jobtype]['ramcore']['sum'] / stats[jobtype]['jobs']

	if out_mode == "stats":
		print_stats(stats)
	if out_mode == "csv":
		print_csv(stats)

def banner():
	""" Text banner """
	print("Slurm Simple Job Summary")
	print("==================================")
	print("")
	print("Part of Simple Slurm Tools")
	print(f"Author: {AUTHOR}")
	print(f"URL: {URL}")
	print("")

if __name__ == "__main__":

	parser = argparse.ArgumentParser("sjobs")
	parser.add_argument("queue_name", help="The name of a Slurm queue to use.", type=str)
	parser.add_argument("-csv", help="Enable CSV output only.", action="store_true")
	args = parser.parse_args()

	if args.csv:
		OUT_MODE = "csv"

	if OUT_MODE != "csv":
		banner()

	if args.queue_name:

		QUEUES.append(args.queue_name)
		sj = SlurmJob()

		for queue in QUEUES:
			# Jobs in the queue in running state
			if OUT_MODE != "csv":
				print(f"Please wait, retrieving running data for {queue}...")
			rj = sj.get_bypartition(partition = queue, state = "R")

			# Jobs in the queue in pending state
			if OUT_MODE != "csv":
				print(f"Please wait, retrieving pending data for {queue}...")
			pj = sj.get_bypartition(partition = queue, state = "P")

			# Add to global totals
			global_jobs += rj
			global_pending_jobs += pj

		# Produce the report for the queue
		queue_summary(global_jobs, global_pending_jobs, OUT_MODE)
		if OUT_MODE != "csv":
			print("")
			print("OK")
	else:
		print("")
