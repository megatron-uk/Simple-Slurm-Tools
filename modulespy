#!/usr/bin/env python3

"""
Simple Slurm Tools
Copyright (C) 2024 John Snowdon

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import argparse
import re
import subprocess

###################################################################
#
# Search for a given loadable module and recurse through all
# child dependencies which are found in order to understand
# the relationship between the loaded software and the software
# necessary to support it.
#
# Dependency chains are **complex**
#
####################################################################

AUTHOR="John Snowdon"
URL="https://github.com/megatron-uk/Simple-Slurm-Tools"

cache = {}
cacheresults = {}

def parse_module(module_name = "", module_text = ""):
	""" Extract the load() statements from a 'module show NAME' call. """

	if module_name in cacheresults:
		return cacheresults[module_name]

	found_modules = []
	match_prog = re.compile(r'^depends_on\(.+')
	match_prog2 = re.compile(r'^load\(.+')
	for line in module_text:
		if len(line) > 4:
			l_string = line.decode()
			results = match_prog.match(l_string)
			if results:
				new_module = results.group(0).split('"')[1]
				print(f"{module_name} -> {new_module}")
				found_modules.append(new_module)
			results = match_prog2.match(l_string)
			if results:
				new_modules = results.group(0).split('"')[1]
				print(f"{module_name} -> {new_module}")
				found_modules.append(new_module)

	cacheresults[module_name] = found_modules
	for this_module in found_modules:
		this_output = run_module(this_module)
		these_lines = parse_module(this_module, this_output)
		if these_lines:
			found_modules += these_lines
	return found_modules

def run_module(module_name = ""):
	""" Run a subprocess to call the module function. """

	jobcmd = "module show " + module_name

	if module_name in cache:
		return cache[module_name]

	process = subprocess.Popen(args=jobcmd,
		shell=True, stdin=subprocess.PIPE,
		stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

	if process:
		module_output = process.stdout.read().rstrip().split(b'\n')
		cache[module_name] = module_output
		if len(module_output) > 0:
			return module_output
		return False

	return False

def banner():
	""" Standard banner """
	print("modulespy - A loadable module interrogation tool")
	print("================================================")
	print("")
	print("Part of Simple Slurm Tools")
	print(f"Author: {AUTHOR}")
	print(f"URL: {URL}")
	print("")

if __name__ == "__main__":
	banner()

	parser = argparse.ArgumentParser("simple_example")
	parser.add_argument("module_name", help="The name of a loadable module to interrogate.", type=str)
	args = parser.parse_args()

	if args.module_name:
		m = args.module_name
		print(f"Searching for all dependencies of: {m}")
		output = run_module(m)
		if output:
			lines = parse_module(m, output)
		print("")
		print("OK")
	else:
		print("")
