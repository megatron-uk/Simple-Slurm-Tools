#!/usr/bin/env python3

"""
Simple Slurm Tools
Copyright (C) 2024 John Snowdon

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import argparse
import os
import subprocess
import sys

from lib.posix import get_users, get_groups, get_users_from_groups
from lib.posix import get_group_quota, get_group_utilisation
from lib.posix import get_user_quota, get_user_utilisation
from lib.posix import get_user_utilisation_ls, get_group_utilisation_ls

####################################################################
#
# Produce a disk utilisation report by user and group for a set
# of filesystem mount points, using quota and/or du.
#
####################################################################

AUTHOR		= "John Snowdon"
URL			= "https://github.com/megatron-uk/Simple-Slurm-Tools"

OUT_MODE		= "stats"
FIND_MODE	= "quota"
FIND_TYPE	= "generic"
DIR_NAME		= "/tmp"
BY_GROUP		= False
ALL_USERS_S	= ""
ALL_GROUPS_S	= ""
ALL_USERS	= []
ALL_GROUPS	= []
ALL_USERS_EXCLUDE = []
ALL_GROUPS_EXCLUDE = []

def banner():
	""" Text banner """
	print("diskrep - A disk utilisation report tool")
	print("========================================")
	print("")
	print("Part of Simple Slurm Tools")
	print(f"Author: {AUTHOR}")
	print(f"URL: {URL}")
	print("")

def report_by_quota(dir_name = None, users = None, users_exclude = None, groups = None, groups_exclude = None, by_group = False, find_type = FIND_TYPE):
	""" Report filesystem use using quota for a given path """

	reports = []

	# Using group-based quotas, and aggregating by group
	if by_group and groups:
		for group in groups:
			data = get_group_quota(FIND_TYPE, group, dir_name)
			if data:
				reports.append(data)

	# Using user-based quotas, not aggregating by group
	if (by_group is False) and users:
		for user in users:
			if user not in users_exclude:
				data = get_user_quota(FIND_TYPE, user, dir_name)
				if data:
					reports.append(data)

	return reports


def report_by_find(dir_name = None, users = None, users_exclude = None, groups = None, groups_exclude = None, by_group = False):
	""" Report filesystem use using find/du for a given path """

	reports = []

	if by_group and groups:
		# For every group, find their list of files under this directory path and sum up the usage.
		for group in groups:
			if group not in groups_exclude:
				data = get_group_utilisation(FIND_MODE, group, dir_name)
				if data:
					reports.append(data)

	if (by_group is False) and users:
		# For every user, find their list of files under this directory path and sum up the usage.
		for user in users:
			if user not in users_exclude:
				data = get_user_utilisation(FIND_MODE, user, dir_name)
				if data:
					reports.append(data)	
	return reports

def report_by_ls(dir_name = None, users = None, users_exclude = None, groups = None, groups_exclude = None, by_group = False):
	""" Report filesystem use using ls for a given path """
	
	reports = []
		
	if by_group and groups:
		# For every group, find their list of files under this directory path and sum up the usage.
		for group in groups:
			if group not in groups_exclude:
				data = get_group_utilisation_ls(FIND_MODE, group, dir_name)
				if data:
					reports.append(data)

	if (by_group is False) and users:
		# For every user, find their list of files under this directory path and sum up the usage.
		for user in users:
			if user not in users_exclude:
				data = get_user_utilisation_ls(FIND_MODE, user, dir_name)
				if data:
					reports.append(data)	
	return reports

def report_users(dir_name = None, reports = None, out_mode = None):
	""" Sort and print report data by users for a filesystem """

	reports_sorted = []
	if reports:
		for report in reports:
			utilisation = 0
			if report['limit'] > 0:
				utilisation = (report['quota'] / report['limit']) * 100
			report['utilisation'] = utilisation
		reports_sorted = sorted(reports, key=lambda x: x['quota'])
		reports_sorted.reverse()

	if out_mode == "csv":
		print("filesystem,username,quota_use,quota_limit,utilisation")
		for report in reports_sorted:
			print(f"{report['dirname']},{report['username']},{report['quota']},{report['limit']},{report['utilisation']}")

	else:

		top_utilisation = {'username' : "", 'dirname' : dir_name, 'quota' : 0, 'limit' : 0, 'utilisation' : 0 }
		top_quota = {'username' : "", 'dirname' : dir_name, 'quota' : 0, 'limit' : 0, 'utilisation' : 0 }
		for r in reports:
			if r['utilisation'] >= top_utilisation['utilisation']:
				top_utilisation = r
			if r['quota'] > top_quota['quota']:
				top_quota = r

		print("")
		print(f"User with highest disk space use	: {top_quota['username']}, {top_quota['quota']} KBytes")
		print(f"User with highest quota use		: {top_utilisation['username']}, {top_utilisation['utilisation']:.2f} %")
		print("")
		print("Username            KBytes used        KBytes limit       Quota Utilisation")
		print("========            ===========        ============       =================")
		for r in reports_sorted:
			print(f"{r['username']:14} {r['quota']:16} {r['limit']:19} {r['utilisation']:10.2f} %")

def report_groups(dir_name = None, reports = None, out_mode = None):
	""" Sort and print report data for a group for a filesystem """
	
	reports_sorted = []
	if reports:
		for report in reports:
			utilisation = 0
			if report['limit'] > 0:
				utilisation = (report['quota'] / report['report']) * 100
			report['utilisation'] = utilisation
		reports_sorted = sorted(reports, key=lambda x: x['quota'])
		reports_sorted.reverse()

	if out_mode == "csv":
		print("filesystem,group,quota_use,quota_limit,utilisation")
		for report in reports_sorted:
			print(f"{report['dirname']},{report['group']},{report['quota']},{report['limit']},{report['utilisation']:.2f}")

	else:

		top_utilisation = {'group' : "", 'dirname' : dir_name, 'quota' : 0, 'limit' : 0, 'utilisation' : 0 }
		top_quota = {'group' : "", 'dirname' : dir_name, 'quota' : 0, 'limit' : 0, 'utilisation' : 0 }
		for r in reports:
			if r['utilisation'] > top_utilisation['utilisation']:
				top_utilisation = r
			if r['quota'] > top_quota['quota']:
				top_quota = r

		print("")
		print(f"Group with highest disk space use	: {top_quota['group']}, {top_quota['quota']} KBytes")
		print(f"Group with highest quota use			: {top_utilisation['group']}, {top_utilisation['utilisation']:.2f} %")
		print("")
		print("Group               KBytes used        KBytes limit       Quota Utilisation")
		print("========            ===========        ============       =================")
		for r in reports_sorted:
			print(f"{r['group']:14} {r['quota']:16} {r['limit']:19} {r['utilisation']:10.2f} %")

if __name__ == "__main__":

	parser = argparse.ArgumentParser("diskrep")
	parser.add_argument("dir_name", help="The directory path or filesystem to analyse.", type=str)
	parser.add_argument("-nq", help="Disable quota, use find/du: this will be slower.",
		action="store_true")
	parser.add_argument("-ls", help="Disable quota, use recursive ls: this should be fast.",
		action="store_true")
	parser.add_argument("-csv", help="Enable CSV output only.", action="store_true")
	parser.add_argument("-bygroup", help="Report utilisation by group, not user.", action="store_true")
	parser.add_argument("-users", help="Comma seperated list of users to report.", type=str)
	parser.add_argument("-users_exclude", help="Comma seperated list of users to exclude from the report.", type=str)
	parser.add_argument("-groups", help="Comma seperated list of groups to report.", type=str)
	parser.add_argument("-groups_exclude", help="Comma seperated list of groups to exclude from the report.", type=str)
	parser.add_argument("-lfs", help="Use native Lustre find and quota commands.", action="store_true")
	args = parser.parse_args()

	reports = []
	users1 = []
	users2 = []
	users1_exclude = []
	users2_exclude = []
	
	if args.nq:
		FIND_MODE = "find"

	if args.ls:
		FIND_MODE = "ls"

	if args.csv:
		OUT_MODE = "csv"

	if OUT_MODE != "csv":
		banner()

	if args.bygroup:
		BY_GROUP = True
		
	if args.lfs:
		for prefix in os.environ['PATH'].split(os.pathsep):
			filename = os.path.join(prefix, 'lfs')
			if os.path.exists(filename):
				FIND_TYPE = "lfs"

	if args.users:
		ALL_USERS_S = args.users
		users1 = get_users(ALL_USERS_S)

	if args.groups:
		ALL_GROUPS_S = args.groups
		ALL_GROUPS = get_groups(ALL_GROUPS_S)
		users2 = get_users_from_groups(ALL_GROUPS)
		
	if args.users_exclude:
		ALL_USERS_EXCLUDE_S = args.users_exclude
		users1_exclude = get_users(ALL_USERS_EXCLUDE_S)

	if args.groups_exclude:
		ALL_GROUPS_EXCLUDE_S = args.groups_exclude
		ALL_GROUPS_EXCLUDE = get_groups(ALL_GROUPS_EXCLUDE_S)
		users2_exclude = get_users_from_groups(ALL_GROUPS_EXCLUDE)

	if args.dir_name:
		if os.path.exists(args.dir_name):
			DIR_NAME = args.dir_name
			
			ALL_USERS = list(set(users1 + users2))
			ALL_USERS_EXCLUDE = list(set(users1_exclude + users2_exclude))

			if OUT_MODE != "csv":
				print(f"Analysing	: {DIR_NAME}")
				print(f"Method		: {FIND_MODE}")
				print(f"FS type		: {FIND_TYPE}")
				print(f"Group mode	: {BY_GROUP}")
				print(f"Users		: {len(ALL_USERS)} users / {len(ALL_USERS_EXCLUDE)} excluded")
				print(f"Groups		: {len(ALL_GROUPS)} groups / {len(ALL_GROUPS_EXCLUDE)} excluded")

			if FIND_MODE == "find":
				reports = report_by_find(DIR_NAME, ALL_USERS, ALL_USERS_EXCLUDE, ALL_GROUPS, ALL_GROUPS_EXCLUDE, BY_GROUP)

			if FIND_MODE == "quota":
				reports = report_by_quota(DIR_NAME, ALL_USERS, ALL_USERS_EXCLUDE, ALL_GROUPS, ALL_GROUPS_EXCLUDE, BY_GROUP)
				
			if FIND_MODE == "ls":
				reports = report_by_ls(DIR_NAME, ALL_USERS, ALL_USERS_EXCLUDE, ALL_GROUPS, ALL_GROUPS_EXCLUDE, BY_GROUP)
				
			if BY_GROUP:
				report_groups(DIR_NAME, reports, OUT_MODE)
			else:
				report_users(DIR_NAME, reports, OUT_MODE)

			if OUT_MODE != "csv":
				print("OK")
		else:
			print(f"ERROR: {args.dir_name} does not exist")
			sys.exit(1)

	else:
		print("")
		sys.exit(0)
